// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Fermi__new
RcppExport SEXP Fermi__new();
RcppExport SEXP _RSeqLib_Fermi__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Fermi__new());
    return rcpp_result_gen;
END_RCPP
}
// Fermi__addReads
void Fermi__addReads(SEXP fermi, Rcpp::StringVector qnames, Rcpp::StringVector seqs, Rcpp::StringVector quals);
RcppExport SEXP _RSeqLib_Fermi__addReads(SEXP fermiSEXP, SEXP qnamesSEXP, SEXP seqsSEXP, SEXP qualsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fermi(fermiSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type qnames(qnamesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type quals(qualsSEXP);
    Fermi__addReads(fermi, qnames, seqs, quals);
    return R_NilValue;
END_RCPP
}
// Fermi__correctReads
void Fermi__correctReads(SEXP fermi);
RcppExport SEXP _RSeqLib_Fermi__correctReads(SEXP fermiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fermi(fermiSEXP);
    Fermi__correctReads(fermi);
    return R_NilValue;
END_RCPP
}
// Fermi__performAssembly
void Fermi__performAssembly(SEXP fermi);
RcppExport SEXP _RSeqLib_Fermi__performAssembly(SEXP fermiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fermi(fermiSEXP);
    Fermi__performAssembly(fermi);
    return R_NilValue;
END_RCPP
}
// Fermi__getContigs
std::vector< std::string > Fermi__getContigs(SEXP fermi);
RcppExport SEXP _RSeqLib_Fermi__getContigs(SEXP fermiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fermi(fermiSEXP);
    rcpp_result_gen = Rcpp::wrap(Fermi__getContigs(fermi));
    return rcpp_result_gen;
END_RCPP
}
// BWA__new
RcppExport SEXP BWA__new();
RcppExport SEXP _RSeqLib_BWA__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(BWA__new());
    return rcpp_result_gen;
END_RCPP
}
// BWA__from_string
void BWA__from_string(SEXP xp, Rcpp::StringVector seq, Rcpp::StringVector seqname);
RcppExport SEXP _RSeqLib_BWA__from_string(SEXP xpSEXP, SEXP seqSEXP, SEXP seqnameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seqname(seqnameSEXP);
    BWA__from_string(xp, seq, seqname);
    return R_NilValue;
END_RCPP
}
// BWA__seqlengths
std::string BWA__seqlengths(SEXP xp);
RcppExport SEXP _RSeqLib_BWA__seqlengths(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(BWA__seqlengths(xp));
    return rcpp_result_gen;
END_RCPP
}
// BWA__from_fasta
void BWA__from_fasta(SEXP xp, std::string& fasta);
RcppExport SEXP _RSeqLib_BWA__from_fasta(SEXP xpSEXP, SEXP fastaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string& >::type fasta(fastaSEXP);
    BWA__from_fasta(xp, fasta);
    return R_NilValue;
END_RCPP
}
// BWA__query
std::string BWA__query(SEXP xp, std::string& qstring, std::string& qname, bool hardclip, double keep_sec_with_frac_of_primary_score, int max_secondary);
RcppExport SEXP _RSeqLib_BWA__query(SEXP xpSEXP, SEXP qstringSEXP, SEXP qnameSEXP, SEXP hardclipSEXP, SEXP keep_sec_with_frac_of_primary_scoreSEXP, SEXP max_secondarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string& >::type qstring(qstringSEXP);
    Rcpp::traits::input_parameter< std::string& >::type qname(qnameSEXP);
    Rcpp::traits::input_parameter< bool >::type hardclip(hardclipSEXP);
    Rcpp::traits::input_parameter< double >::type keep_sec_with_frac_of_primary_score(keep_sec_with_frac_of_primary_scoreSEXP);
    Rcpp::traits::input_parameter< int >::type max_secondary(max_secondarySEXP);
    rcpp_result_gen = Rcpp::wrap(BWA__query(xp, qstring, qname, hardclip, keep_sec_with_frac_of_primary_score, max_secondary));
    return rcpp_result_gen;
END_RCPP
}
// fastqReader_Open
bool fastqReader_Open(const std::string& f);
RcppExport SEXP _RSeqLib_fastqReader_Open(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(fastqReader_Open(f));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSeqLib_Fermi__new", (DL_FUNC) &_RSeqLib_Fermi__new, 0},
    {"_RSeqLib_Fermi__addReads", (DL_FUNC) &_RSeqLib_Fermi__addReads, 4},
    {"_RSeqLib_Fermi__correctReads", (DL_FUNC) &_RSeqLib_Fermi__correctReads, 1},
    {"_RSeqLib_Fermi__performAssembly", (DL_FUNC) &_RSeqLib_Fermi__performAssembly, 1},
    {"_RSeqLib_Fermi__getContigs", (DL_FUNC) &_RSeqLib_Fermi__getContigs, 1},
    {"_RSeqLib_BWA__new", (DL_FUNC) &_RSeqLib_BWA__new, 0},
    {"_RSeqLib_BWA__from_string", (DL_FUNC) &_RSeqLib_BWA__from_string, 3},
    {"_RSeqLib_BWA__seqlengths", (DL_FUNC) &_RSeqLib_BWA__seqlengths, 1},
    {"_RSeqLib_BWA__from_fasta", (DL_FUNC) &_RSeqLib_BWA__from_fasta, 2},
    {"_RSeqLib_BWA__query", (DL_FUNC) &_RSeqLib_BWA__query, 6},
    {"_RSeqLib_fastqReader_Open", (DL_FUNC) &_RSeqLib_fastqReader_Open, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSeqLib(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
